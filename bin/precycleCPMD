#!/bin/bash
# =============================================================================
# dynutil v4.0
# (c) 2013       Jakub Stepan, xstepan3@chemi.muni.cz
# =============================================================================
# -----------------------------------------------------------------------------
# precycleCPMD - command for restartable production dynamics
# -----------------------------------------------------------------------------

# input variables -------------------------------------------------------------

# MD_MODULE                     - module containing MD_CORE
# MD_CORE                       - program for calculation

# PRECYCLE_CONTROL              - control file
# PRECYCLE_PSEUDOPOTENTIALS     - ful path to pseudopotential dir

# PRECYCLE_START                - start offset
# PRECYCLE_STOP                 - stop offset
# PRECYCLE_ICYCLES              - number of internal runs
# PRECYCLE_NAME_FORMAT          - name of root in printf format (printf format)
# PRECYCLE_COMPRESS_TRAJ        - compressor name or empty string

# from previous run
# _PRECYCLE_STAGE               - current stage

# -----------------------------------------------------------------------------
# print header

echo ""
echo "================================================================================"
echo "|                                                                              |"
echo "|          PRECYCLE CPMD - performs restartable production CPMD dynamics       |"
echo "|                 (c) 2013 Jakub Stepan, xstepan3@chemi.muni.cz                |"
echo "|                                                                              |"
echo "================================================================================"
echo ""

# -----------------------------------------------------------------------------
# check syntax

echo " 1. Checking syntax ..."

_ERROR=0

# control file ------------------------

if [ "$PRECYCLE_CONTROL" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_CONTROL variable is not set or is not exported!"
    echo ""
    _ERROR=1
else
    if ! [ -f $PRECYCLE_CONTROL ]; then
        if [ "$_ERROR" == "0" ]; then echo ""; fi
        echo " ERROR: Control file \"$PRECYCLE_CONTROL\" does not exist!"
        echo ""
        _ERROR=1
    fi
fi

# pseudopotential path ------------------

if [ "$PRECYCLE_PSEUDOPOTENTIALS" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_PSEUDOPOTENTIALS variable not set, files are expected in working dir."
    echo ""
else
    if ! [ -d $PRECYCLE_PSEUDOPOTENTIALS ]; then
        if [ "$_ERROR" == "0" ]; then echo ""; fi
        echo " ERROR: Pseudopotential path $PRECYCLE_PSEUDOPOTENTIALS directory does not exist."
        echo ""
        _ERROR=1
    fi
fi

# number of first run -----------------

if [ "$PRECYCLE_START" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_START variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

expr $PRECYCLE_START + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_START is not a number!"
    echo ""
    _ERROR=1
fi

# number of last run ------------------

if [ "$PRECYCLE_STOP" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_STOP variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

expr $PRECYCLE_STOP + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_STOP is not a number!"
    echo ""
    _ERROR=1
fi

# name format -------------------------

if [ "$PRECYCLE_NAME_FORMAT" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_NAME_FORMAT variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

printf "$PRECYCLE_NAME_FORMAT" 1 &> /dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_NAME_FORMAT does not contain valid format specification!"
    echo ""
    _ERROR=1
fi

# storage directory for results  ------

PRECYCLE_STORAGE="storage"
PRECYCLE_STORAGE="$INF_JOB_MACHINE:$INF_JOB_PATH/$PRECYCLE_STORAGE"

# check if PRECYCLE_STORAGE is correctly defined

echo "test file" > _test_storage
scp -q _test_storage $PRECYCLE_STORAGE &> /dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_STORAGE is not valid storage directory!"
    echo ""
    _ERROR=1
fi

# compress traj  ------

if [ -n "$PRECYCLE_COMPRESS_TRAJ" ] && \
   [    "$PRECYCLE_COMPRESS_TRAJ" != "gzip" ] && \
   [    "$PRECYCLE_COMPRESS_TRAJ" != "bzip2" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_COMPRESS_TRAJ has to be either empty string, gzip or bzip2!"
    echo ""
    _ERROR=1
fi

# number of internal cycles ---

if [ -z "$PRECYCLE_ICYCLES" ]; then
   export PRECYCLE_ICYCLES="1"
fi

expr $PRECYCLE_ICYCLES + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_ICYCLES is not a number!"
    echo ""
    _ERROR=1
fi

# check MD_CORE -----------------------

if [ "$MD_CORE" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: None MD program is set! (MD_CORE is not set or is not exported!)"
    echo ""
    _ERROR=1
fi

# exit if some error was detected -----

if [ "$_ERROR" == "1" ]; then
    exit 1
fi

# ----------------------------------------------------------------------------------

if [ -e EXIT ]; then
    echo ""
    echo " ERROR: EXIT file detected before the first production stage!"
    echo "        Remove this file from the working directory to continue the run."
    echo ""
    exit 1
fi

echo "    Success."
echo ""
echo " 2. Precycle setup"
echo "--------------------------------------------------"
echo "    Control file              : $PRECYCLE_CONTROL"
echo "    Pseudopotentials path     : $PRECYCLE_PSEUDOPOTENTIALS"
echo "    ----------------------------------------------"
echo "    First production          : $PRECYCLE_START"
echo "    Last production           : $PRECYCLE_STOP"
echo "    Name format               : $PRECYCLE_NAME_FORMAT"
echo "    Result storage            : $PRECYCLE_STORAGE"
if [ -z "$PRECYCLE_COMPRESS_TRAJ" ]; then
echo "    Trajectory compressor     : none"
else
echo "    Trajectory compressor     : $PRECYCLE_COMPRESS_TRAJ"
fi
echo "    Number of internal cycles : $PRECYCLE_ICYCLES"
echo "    ----------------------------------------------"
echo "    MD module                 : $MD_MODULE"
echo "    MD executable             : $MD_CORE"
echo ""
echo ""

# -----------------------------------------------------------------------------
# find previous recycle information

echo " 3. Precycle initialization ..."

PRECYCLE_STORAGE_HOST=`echo $PRECYCLE_STORAGE | cut -d":" -f1`
PRECYCLE_STORAGE_DIR=`echo $PRECYCLE_STORAGE | cut -d":" -f2`

echo "       Scannig for the last restart ..."
echo "          Storage host : $PRECYCLE_STORAGE_HOST"
echo "          Storage dir  : $PRECYCLE_STORAGE_DIR"

ssh $PRECYCLE_STORAGE_HOST " \
ISTAGE=\$(($PRECYCLE_STOP+1)); \
while [ \$ISTAGE -gt $PRECYCLE_START ]; \
    do \
        STAGE_STRING=\"\`printf $PRECYCLE_NAME_FORMAT \$ISTAGE\`\"; \
        if test -f \"$PRECYCLE_STORAGE_DIR/\$STAGE_STRING.RESTART\" ; \
            then \
        echo \"          Last stage   : \$STAGE_STRING - found.\" 1>&2; \
            break; \
        fi; \
        echo \"          Last stage   : \$STAGE_STRING - not found ...\" 1>&2; \
        ISTAGE=\$((\$ISTAGE-1)); \
    done; \
echo 1>&2; \
echo \$ISTAGE; \
" > /tmp/$USER.$$.prodid

STAGE=`cat /tmp/$USER.$$.prodid`
rm -f /tmp/$USER.$$.prodid

STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $STAGE`"

if [ "$STAGE" == "$(($PRECYCLE_STOP+1))" ]; then
    echo ""
    echo " ERROR: Restart file for '$STAGE_STRING' stage is out of specified range!"
    echo "        All production runs were probably processed!"
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

if [ "$STAGE" == "$PRECYCLE_START" ]; then
    echo "       No previous restart file found: using initial RESTART"
else
    echo "       Previous restart found from the stage: $STAGE_STRING"
fi

# detecting runtime environment -----------------------------------------------

if [ -z "$INF_JOB_NAME" ] || [ -z "$INF_JOB_PATH" ]; then
    echo ""
    echo " ERROR: precycleCPMD jobs have to be run in the Infinity environment!"
    echo "        Use the psubmit command to start your job!"
    echo ""
    exit 1
fi

# -----------------------------------------------------------------------------
# generate string and temporary file for error messages

ERRFILE=/tmp/$USER.$$


# try to clean previous stage --------------------------------------------------
# we need some magic from infinity

echo " 4. Trying to clean previous run ..."

PREV_STAGE=$(($STAGE-$PRECYCLE_ICYCLES))
PREV_STAGE_S1="`printf "$PRECYCLE_NAME_FORMAT" $PREV_STAGE`"
PREV_STAGE_S2="#`printf %03d $PREV_STAGE`"


ssh $INF_JOB_MACHINE \
    "cd $INF_JOB_PATH; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.info\" ]; \
        then \
            scp \"$INF_JOB_NAME$PREV_STAGE_S2.info\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.info\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.info\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.stdout\" ]; \
        then \
            scp \"$INF_JOB_NAME$PREV_STAGE_S2.stdout\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.stdout\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.stdout\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.infout\" ]; \
        then \
            scp \"$INF_JOB_NAME$PREV_STAGE_S2.infout\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.infout\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.infout\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.inferr\" ]; \
        then \echo " 1b. Trying to clean previous run ..."

            scp \"$INF_JOB_NAME$PREV_STAGE_S2.inferr\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.inferr\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.inferr\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.infkey\" ]; \
        then \echo " 1b. Trying to clean previous run ..."

            scp \"$INF_JOB_NAME$PREV_STAGE_S2.infkey\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.infkey\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.infkey\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.nodes\" ]; \
        then \
            scp \"$INF_JOB_NAME$PREV_STAGE_S2.nodes\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.nodes\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.nodes\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.gpus\" ]; \
        then \
            scp \"$INF_JOB_NAME$PREV_STAGE_S2.gpus\" \"$PRECYCLE_STORAGE/$PREV_STAGE_S1.gpus\"; \
            if [ $? -eq 0 ]; then rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.gpus\"; fi; \
        fi; \
     if [ -f \"$INF_JOB_NAME$PREV_STAGE_S2.infex\" ]; \
        then \
            rm -f \"$INF_JOB_NAME$PREV_STAGE_S2.infex\"; \
        fi; \
    " &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to clean previous run!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

# delete local copy on scratch
if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.info" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.info"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.stdout" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.stdout"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.infout" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.infout"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.inferr" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.inferr"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.infex" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.infex"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.infkey" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.infkey"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.nodes" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.nodes"
fi

if [ -f "$INF_JOB_NAME$PREV_STAGE_S2.gpus" ]; then
    rm -f "$INF_JOB_NAME$PREV_STAGE_S2.gpus"
fi

echo "    Success."
echo ""

echo " 5. Internal loop"
echo "#-------------------------------------------------------------------------------"
echo ""

# -----------------------------------------------------------------------------

for((I=0;I < $PRECYCLE_ICYCLES;I++)); do

# -----------------------------------------------------------------------------
# prepare input coordinates

echo " IL - 1. Preparing input coordinates..."

if [ "$STAGE" == "$PRECYCLE_START" ]; then
    # make copy of input coordinates in PRECYCLE_STORAGE
    scp -q RESTART $PRECYCLE_STORAGE/$STAGE_STRING.RESTART &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to find RESTART file. Script precycleCPMD needs cpmd to start from RESTART."
        echo " Please do not use LATEST file to restart simulation."
        echo " Unable to copy 'RESTART' to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi

else
    scp -q $PRECYCLE_STORAGE/$STAGE_STRING.RESTART RESTART &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy '$STAGE_STRING.RESTART' from"
        echo "        precycleCPMD storage to current directory!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi

    PREV_STAGE=$(($STAGE-1))
    PREV_STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $PREV_STAGE`"

    # try to recover PMFLib restarts - optional
    scp -q $PRECYCLE_STORAGE/$PREV_STAGE_STRING.abfrst _abf.rst &> $ERRFILE
    scp -q $PRECYCLE_STORAGE/$PREV_STAGE_STRING.conrst _con.rst &> $ERRFILE
    scp -q $PRECYCLE_STORAGE/$PREV_STAGE_STRING.mtdrst _mtd.rst &> $ERRFILE
fi

echo "    Success."
echo ""

# perform MD run --------------------------------------------------------------

NEXT_STAGE=$(($STAGE+1))
NEXT_STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $NEXT_STAGE`"


echo " IL - 2. Performing molecular dynamics run for '$STAGE_STRING' stage ..."

$MD_CORE $PRECYCLE_CONTROL $PRECYCLE_PSEUDOPOTENTIALS > $STAGE_STRING.out 2> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Molecular dynamics run failed!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

# compressing trajectory

if [ -n "$PRECYCLE_COMPRESS_TRAJ" ]; then
    $PRECYCLE_COMPRESS_TRAJ TRAJEC.xyz

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Compression failed!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

echo "    Success."
echo ""

# move results to precycleCPMD storage --------------------------------------------

echo " IL - 3. Moving results to precycleCPMD storage ..."
# TRAJEC.xyz does not have to be there necesserily
case $PRECYCLE_COMPRESS_TRAJ in
gzip)  scp -q TRAJEC.xyz.gz $PRECYCLE_STORAGE/$STAGE_STRING.xyz.gz &> $ERRFILE;;
bzip2) scp -q TRAJEC.xyz.bz2 $PRECYCLE_STORAGE/$STAGE_STRING.xyz.bz2 &> $ERRFILE;;
*)     scp -q TRAJEC.xyz $PRECYCLE_STORAGE/$STAGE_STRING.xyz &> $ERRFILE;;
esac

if [ $? -ne 0 ]; then
    echo ""
    echo " WARNING: Unable to copy result to precycleCPMD storage, this error is not fatal."
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
fi


# TRAJECTORY does not have to be there necesserily
scp -q TRAJECTORY $PRECYCLE_STORAGE/$STAGE_STRING.TRAJECTORY &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " WARNING: Unable to copy result to precycleCPMD storage, this error is not fatal."
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
fi

scp -q $STAGE_STRING.out $PRECYCLE_STORAGE &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to copy result to precycleCPMD storage!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

# Keep the last restart - get from file LATEST
LAST_RESTART=`head -1 LATEST | awk '{print $1}'`
scp -q $LAST_RESTART $PRECYCLE_STORAGE/$NEXT_STAGE_STRING.RESTART &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to copy result to precycleCPMD storage!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi
echo "Final restart $LAST_RESTART."

scp -q LATEST $PRECYCLE_STORAGE/$STAGE_STRING.LATEST &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to copy result to precycleCPMD storage!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

scp -q ENERGIES $PRECYCLE_STORAGE/$STAGE_STRING.ENERGIES &> $ERRFILE

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to copy result to precycleCPMD storage!"
    echo "        Error message follows:"
    echo ""
    cat $ERRFILE
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

if [ -f "_abf.out" ]; then
    scp -q _abf.out $PRECYCLE_STORAGE/$STAGE_STRING.abfout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_abf.rst" ]; then
    scp -q _abf.rst $PRECYCLE_STORAGE/$STAGE_STRING.abfrst &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_res.out" ]; then
    scp -q _res.out $PRECYCLE_STORAGE/$STAGE_STRING.resout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_res.rst" ]; then
    scp -q _res.rst $PRECYCLE_STORAGE/$STAGE_STRING.resrst &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_mon.out" ]; then
    scp -q _mon.out $PRECYCLE_STORAGE/$STAGE_STRING.monout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_con.out" ]; then
    scp -q _con.out $PRECYCLE_STORAGE/$STAGE_STRING.conout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_con.rst" ]; then
    scp -q _con.rst $PRECYCLE_STORAGE/$STAGE_STRING.conrst &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_mtd.out" ]; then
    scp -q _mtd.out $PRECYCLE_STORAGE/$STAGE_STRING.mtdout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_mtd.rst" ]; then
    scp -q _mtd.rst $PRECYCLE_STORAGE/$STAGE_STRING.mtdrst &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_mtd.cvs" ]; then
    scp -q _mtd.cvs $PRECYCLE_STORAGE/$STAGE_STRING.mtdcvs &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_mtd.hills" ]; then
    scp -q _mtd.hills $PRECYCLE_STORAGE/$STAGE_STRING.mtdhills &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_pdrv.out" ]; then
    scp -q _pdrv.out $PRECYCLE_STORAGE/$STAGE_STRING.pdrvout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "_stm.out" ]; then
    scp -q _stm.out $PRECYCLE_STORAGE/$STAGE_STRING.stmout &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "CRD_INI.g96" ]; then
    scp -q CRD_INI.g96 $PRECYCLE_STORAGE/$STAGE_STRING.CRD_INI.g96 &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "CRD_FIN.g96" ]; then
    scp -q CRD_FIN.g96 $PRECYCLE_STORAGE/$STAGE_STRING.CRD_FIN.g96 &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "ELPOT" ]; then
    scp -q ELPOT $PRECYCLE_STORAGE/$STAGE_STRING.ELPOT &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "DENSITY" ]; then
    scp -q DENSITY $PRECYCLE_STORAGE/$STAGE_STRING.DENSITY &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "QMMM_ORDER" ]; then
    scp -q QMMM_ORDER $PRECYCLE_STORAGE/$STAGE_STRING.QMMM_ORDER &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "MM_CELL_TRANS" ]; then
    scp -q MM_CELL_TRANS $PRECYCLE_STORAGE/$STAGE_STRING.MM_CELL_TRANS &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "ENERGIES" ]; then
    scp -q ENERGIES $PRECYCLE_STORAGE/$STAGE_STRING.ENERGIES &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "INTERACTING_NEW.pdb" ]; then
    scp -q INTERACTING_NEW.pdb $PRECYCLE_STORAGE/$STAGE_STRING.INTERACTING_NEW.pdb &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "INTERACTING.pdb" ]; then
    scp -q INTERACTING.pdb $PRECYCLE_STORAGE/$STAGE_STRING.INTERACTING.pdb &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "EL_ENERGY" ]; then
    scp -q EL_ENERGY $PRECYCLE_STORAGE/$STAGE_STRING.EL_ENERGY &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "ESP" ]; then
    scp -q ESP $PRECYCLE_STORAGE/$STAGE_STRING.ESP &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "MULTIPOLE" ]; then
    scp -q MULTIPOLE $PRECYCLE_STORAGE/$STAGE_STRING.MULTIPOLE &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "TRAJECTORY_INTERACTING" ]; then
    scp -q TRAJECTORY_INTERACTING $PRECYCLE_STORAGE/$STAGE_STRING.TRAJECTORY_INTERACTING &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "TRAJECTORY_PIP" ]; then
    scp -q TRAJECTORY_PIP $PRECYCLE_STORAGE/$STAGE_STRING.TRAJECTORY_PIP &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "CHJ" ]; then
    scp -q CHJ $PRECYCLE_STORAGE/$STAGE_STRING.CHJ &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "colvar_mtd" ]; then
    scp -q colvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.colvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "parvar_mtd" ]; then
    scp -q parvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.parvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "disvar_mtd" ]; then
    scp -q disvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.disvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "velvar_mtd" ]; then
    scp -q velvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.velvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "forfac_mtd" ]; then
    scp -q forfac_mtd $PRECYCLE_STORAGE/$STAGE_STRING.forfac_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "cvmdck_mtd" ]; then
    scp -q cvmdck_mtd $PRECYCLE_STORAGE/$STAGE_STRING.cvmdck_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "sclvar_mtd" ]; then
    scp -q sclvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.sclvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "enevar_mtd" ]; then
    scp -q enevar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.enevar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "istvar_mtd" ]; then
    scp -q istvar_mtd $PRECYCLE_STORAGE/$STAGE_STRING.istvar_mtd &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "MTD_LIST" ]; then
    scp -q MTD_LIST $PRECYCLE_STORAGE/$STAGE_STRING.MTD_LIST &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

if [ -f "MTD_RESTART" ]; then
    scp -q MTD_RESTART $PRECYCLE_STORAGE/$STAGE_STRING.MTD_RESTART &> $ERRFILE

    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy result to precycleCPMD storage!"
        echo "        Error message follows:"
        echo ""
        cat $ERRFILE
        echo ""
        rm -f $ERRFILE &> /dev/null
        exit 1
    fi
fi

rm -f RESTART.* $STAGE_STRING.out $STAGE_STRING.crd $STAGE_STRING.traj* ENERGIES \
      $STAGE_STRING.crd  TRAJEC.xyz TRAJECTORY $STAGE_STRING.out CRD_INI.g96 CRD_FIN.g96  \
      ELPOT DENSITY MM_CELL_TRANS INTERACTING_NEW.pdb INTERACTING.pdb LATEST QMMM_ORDER \
      EL_ENERGY ESP MULTIPOLE TRAJECTORY_INTERACTING TRAJECTORY_PIP CHJ \
      _abf.out _abf.rst _res.out _res.rst _mon.out _con.out _con.rst \
      _mtd.out _mtd.rst _mtd.cvs _mtd.hills _pdrv.out _stm.out \
      colvar_mtd parvar_mtd disvar_mtd velvar_mtd forfac_mtd cvmdck_mtd  \
      sclvar_mtd enevar_mtd istvar_mtd MTD_LIST &> /dev/null
echo "    Success."
echo ""

rm -f mdinfo

#---------------------------------------------------------------------------
# check for end

echo " IL - 4. Testing if this is last run ..."

if [ "$NEXT_STAGE" -gt "$PRECYCLE_STOP" ]; then
    echo "    Last run was performed - precycleCPMD is terminated."
    echo ""
    echo "================================================================================"
    echo "|                                                                              |"
    echo "|                             END OF PRECYCLE CPMD                             |"
    echo "|                                                                              |"
    echo "================================================================================"
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 0
fi

if [ -f "EXIT" ]; then
    echo "    EXIT file was found - precycleCPMD is softly interrupted."
    echo ""
    echo "================================================================================"
    echo "|                                                                              |"
    echo "|                             END OF PRECYCLE CPMD                             |"
    echo "|                                                                              |"
    echo "================================================================================"
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 0
fi

echo "    precycleCPMD will continue with next run."
echo ""

echo "#-------------------------------------------------------------------------------"

# update for next internal loop
STAGE=$NEXT_STAGE
STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $STAGE`"

done     # end of PRECYCLE_ICYCLES cycle

echo ""

# -----------------------------------------------------------------------------
# resubmit job to the queue

echo " 6. Submiting next run to the batch system via Infinity system ..."

if [ "$INF_ARG_DESTINATION" == "" ] || [ "$INF_ARG_JOB" == "" ]; then
    echo ""
    echo " ERROR: INF_ARG_DESTINATION or INF_ARG_JOB variable is not set!"
    echo "        Job was not submited to PBS!"
    echo ""
    exit 1
fi

# set next job parameters
export INF_EXTERNAL_NAME_AFIX=\"#`printf %03d $NEXT_STAGE`\"
export INF_EXTERNAL_START_AFTER=$INF_JOB_ID

presubmit

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to re-submit job!"
    echo "        Look above for errors."
    echo ""
    rm -f $ERRFILE &> /dev/null
    exit 1
fi

# remove error file
rm -f $ERRFILE &> /dev/null

echo ""
echo "================================================================================"
echo "|                                                                              |"
echo "|                             END OF PRECYCLE CPMD                             |"
echo "|                                                                              |"
echo "================================================================================"
echo ""

