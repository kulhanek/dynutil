#!/usr/bin/env infinity-env
# =============================================================================
# dynutil v5.0
# (c) 2017       Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2009       Petr Kulhanek, kulhanek@chemi.muni.cz
# (c) 2005, 2006 Petr Kulhanek, kulhanek@chemi.muni.cz
# =============================================================================
# -----------------------------------------------------------------------------
# precycle - command for restartable production dynamics
# -----------------------------------------------------------------------------

# input variables -------------------------------------------------------------

# MD_MODULE                     - module containing MD_CORE
# MD_CORE                       - program for calculation

# PRECYCLE_TOP                  - topology
# PRECYCLE_CRD                  - coordinates

# PRECYCLE_CONTROL              - control file

# PRECYCLE_START                - start offset
# PRECYCLE_STOP                 - stop offset
# PRECYCLE_NAME_FORMAT          - name of root in printf format (printf format)

# from previous run
# INF_RECYCLE_CURRENT           - current stage, set by psubmit

# -----------------------------------------------------------------------------
# print header

echo ""
echo "================================================================================"
echo "|                                                                              |"
echo "|            PRECYCLE - performs restartable production dynamics               |"
echo "|     (c) 2004,2005,2006,2009,2017 Petr Kulhanek, kulhanek@chemi.muni.cz       |"
echo "|                                                                              |"
echo "================================================================================"

# -----------------------------------------------------------------------------

echo ""
echo " 1. Checking syntax ..."

_ERROR=0

# input topology ----------------------

if [ "$PRECYCLE_TOP" == "" ]; then
    echo ""
    echo " ERROR: PRECYCLE_TOP variable is not set or is not exported!"
    echo ""
    _ERROR=1
else
    if ! [ -f $PRECYCLE_TOP ]; then
        echo ""
        echo " ERROR: Topology file \"$PRECYCLE_TOP\" does not exist!"
        echo ""
        _ERROR=1
    fi
fi

# input restart file ------------------

if [ "$PRECYCLE_CRD" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_CRD variable is not set or is not exported!"
    echo ""
    _ERROR=1
else
    if ! [ -f $PRECYCLE_CRD ]; then
        if [ "$_ERROR" == "0" ]; then echo ""; fi
        echo " ERROR: Initial restart file \"$PRECYCLE_CRD\" does not exist!"
        echo ""
        _ERROR=1
    fi
fi

# control file ------------------------

if [ "$PRECYCLE_CONTROL" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_CONTROL variable is not set or is not exported!"
    echo ""
    _ERROR=1
else
    if ! [ -f $PRECYCLE_CONTROL ]; then
        if [ "$_ERROR" == "0" ]; then echo ""; fi
        echo " ERROR: Control file \"$PRECYCLE_CONTROL\" does not exist!"
        echo ""
        _ERROR=1
    fi
fi

# number of first run -----------------

if [ "$PRECYCLE_START" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_START variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

expr $PRECYCLE_START + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_START is not a number!"
    echo ""
    _ERROR=1
fi

# number of last run ------------------

if [ "$PRECYCLE_STOP" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_STOP variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

expr $PRECYCLE_STOP + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_STOP is not a number!"
    echo ""
    _ERROR=1
fi

# name format -------------------------

if [ "$PRECYCLE_NAME_FORMAT" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: PRECYCLE_NAME_FORMAT variable is not set or is not exported!"
    echo ""
    _ERROR=1
fi

printf "$PRECYCLE_NAME_FORMAT" 1 &> /dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_NAME_FORMAT does not contain valid format specification!"
    echo ""
    _ERROR=1
fi

# storage directory for results  ------

if [ -z "$INF_ARCHIVE_DIR" ]; then
    echo " ERROR: Variable INF_ARCHIVE_DIR is not set!"
    echo ""
    _ERROR=1
fi

if [ -z "$INF_RECYCLE_CURRENT" ]; then
    echo " ERROR: Variable INF_RECYCLE_CURRENT is not set!"
    echo ""
    _ERROR=1
fi

# number of internal cycles ---

if [ -z "$PRECYCLE_ICYCLES" ]; then
   export PRECYCLE_ICYCLES="1"
fi

expr $PRECYCLE_ICYCLES + 1 &>/dev/null

if [ $? -ne 0 ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: Variable PRECYCLE_ICYCLES is not a number!"
    echo ""
    _ERROR=1
fi

# check MD_CORE -----------------------

if [ "$MD_CORE" == "" ]; then
    if [ "$_ERROR" == "0" ]; then echo ""; fi
    echo " ERROR: No MD program is set! (MD_CORE is not set or is not exported!)"
    echo ""
    _ERROR=1
fi

# exit if some error was detected -----

if [ "$_ERROR" == "1" ]; then
    exit 1
fi

# check collision of input coordinates with cooridnates produced during run

for((STAGE=$PRECYCLE_START; STAGE <= $PRECYCLE_STOP; STAGE++)); do
    STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $STAGE`"
    if [ "$PRECYCLE_CRD" == "$STAGE_STRING.rst7" ]; then
        if [ "$_ERROR" == "0" ]; then echo ""; fi
        echo " ERROR: Input coordinates collide with coordinates for stage $STAGE!"
        echo ""
    fi
done

if [ "$_ERROR" == "1" ]; then
    exit 1
fi

# ----------------------------------------------------------------------------------

if [ -e EXIT ] || [ -e STOP ]; then
    echo ""
    echo " ERROR: The EXIT/STOP file detected before the first production stage!"
    echo "        Remove this file from the working directory."
    echo ""
    exit 1
fi

echo ""
echo " 2. Precycle setup"
echo "--------------------------------------------------"
echo "    Topology                  : $PRECYCLE_TOP"
echo "    Input coordinates         : $PRECYCLE_CRD"
echo "    ----------------------------------------------"
echo "    First production          : $PRECYCLE_START"
echo "    Last production           : $PRECYCLE_STOP"
echo "    Name format               : $PRECYCLE_NAME_FORMAT"
echo "    Number of internal cycles : $PRECYCLE_ICYCLES"
echo "    Storage directory         : $INF_ARCHIVE_DIR"
echo "    Current stage             : $INF_RECYCLE_CURRENT"
echo "    ----------------------------------------------"
echo "    Control file              : $PRECYCLE_CONTROL"
echo "    ----------------------------------------------"
echo "    MD module                 : $MD_MODULE"
echo "    MD executable             : $MD_CORE"

# -----------------------------------------------------------------------------
# find previous recycle information

echo ""
echo " 3. Precycle initialization ..."

STAGE="$INF_RECYCLE_CURRENT"
STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $STAGE`"

if [ "$STAGE" == "$(($PRECYCLE_STOP+1))" ]; then
    echo ""
    echo " ERROR: The coordinate file for '$STAGE_STRING' stage is out of specified range!"
    echo "        All productions were probably processed!"
    echo ""
    exit 1
fi

if [ "$STAGE" == "$PRECYCLE_START" ]; then
    echo "       No coordinates - first run: `printf "$PRECYCLE_NAME_FORMAT" $STAGE`"
else
    echo "       The last accessible input coordinates are for stage: $STAGE_STRING"
fi

# try to clean previous stage --------------------------------------------------

echo ""
echo " 4. Clean the previous run ..."

parchive runtime "$PRECYCLE_START" "$STAGE" "$PRECYCLE_NAME_FORMAT"
if [ $? -ne 0 ]; then exit 1; fi

echo ""
echo " 5. Internal loop"
echo "#-------------------------------------------------------------------------------"

# -----------------------------------------------------------------------------

for((I=0;I < $PRECYCLE_ICYCLES;I++)); do

# -----------------------------------------------------------------------------
# prepare input coordinates

echo ""
echo " IL - 1. Preparing input coordinates..."

if [ "$STAGE" == "$PRECYCLE_START" ]; then
    # the first run
    echo ">> The first run: '$PRECYCLE_CRD' -> '$STAGE_STRING.rst7'"
    cp "$PRECYCLE_CRD" "$STAGE_STRING.rst7"
    if [ $? -ne 0 ]; then
        echo ""
        echo " ERROR: Unable to copy the input coordinate file '$PRECYCLE_CRD' as '$STAGE_STRING.rst7'!"
        echo ""
        exit 1
    fi

    parchive write "$STAGE_STRING.rst7"
    if [ $? -ne 0 ]; then exit 1; fi

else
    # next runs
    parchive get "$STAGE_STRING.rst7"
    if [ $? -ne 0 ]; then exit 1; fi

    PREV_STAGE=$(($STAGE-1))
    PREV_STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $PREV_STAGE`"

    # try to recover PMFLib restarts - optional
    parchive tryget "$PREV_STAGE_STRING.abfrst" "$PREV_STAGE_STRING.cstrst" "$PREV_STAGE_STRING.mtdrst"
    if [ -f "$PREV_STAGE_STRING.abfrst" ]; then
        mv "$PREV_STAGE_STRING.abfrst" _abf.rst
        echo ">> INFO: PMFLib _abs.rst recovered!"
    fi
    if [ -f "$PREV_STAGE_STRING.cstrst" ]; then
        mv "$PREV_STAGE_STRING.cstrst" _cst.rst
        echo ">> INFO: PMFLib _cst.rst recovered!"
    fi
    if [ -f "$PREV_STAGE_STRING.mtdrst" ]; then
        mv "$PREV_STAGE_STRING.mtdrst" _mtd.rst
        echo ">> INFO: PMFLib _mtd.rst recovered!"
    fi
fi

# perform MD run --------------------------------------------------------------

NEXT_STAGE=$(($STAGE+1))
NEXT_STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $NEXT_STAGE`"

echo ""
echo " IL - 2. Performing molecular dynamics run for the '$STAGE_STRING' stage ..."

$MD_CORE -O -i "$PRECYCLE_CONTROL" -o $STAGE_STRING.out -p $PRECYCLE_TOP -c $STAGE_STRING.rst7 \
         -x $STAGE_STRING.traj -r $NEXT_STAGE_STRING.rst7

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Molecular dynamics run failed!"
    echo ""
    exit 1
fi

# remove the previous start file
rm -f "$STAGE_STRING.rst7"

# move results to precycle storage --------------------------------------------

echo ""
echo " IL - 3. Moving results to precycle storage ..."

FILES_TO_ARCHIVE="$STAGE_STRING.traj $STAGE_STRING.out $NEXT_STAGE_STRING.rst7"

if [ -f mdinfo ]; then
    mv mdinfo "$NEXT_STAGE_STRING.mdinfo"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $NEXT_STAGE_STRING.mdinfo"
fi

# PMFLib files ---------------------------

if [ -f "_abf.out" ]; then
    mv "_abf.out" "$STAGE_STRING.abfout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.abfout"
fi
if [ -f "_abf.rst" ]; then
    mv "_abf.rst" "$STAGE_STRING.abfrst"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.abfrst"
fi
if [ -f "_rst.out" ]; then
    mv "_rst.out" "$STAGE_STRING.rstout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.rstout"
fi
if [ -f "_rst.rst" ]; then
    mv "_rst.rst" "$STAGE_STRING.rstrst"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.rstrst"
fi
if [ -f "_mon.out" ]; then
    mv "_mon.out" "$STAGE_STRING.monout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.monout"
fi
if [ -f "_cst.out" ]; then
    mv "_cst.out" "$STAGE_STRING.cstout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.cstout"
fi
if [ -f "_cst.rst" ]; then
    mv "_cst.rst" "$STAGE_STRING.cstrst"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.cstrst"
fi
if [ -f "_mtd.out" ]; then
    mv "_mtd.out" "$STAGE_STRING.mtdout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.mtdout"
fi
if [ -f "_mtd.rst" ]; then
    mv "_mtd.rst" "$STAGE_STRING.mtdrst"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.mtdrst"
fi
if [ -f "_mtd.cvs" ]; then
    mv "_mtd.cvs" "$STAGE_STRING.mtdcvs"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.mtdcvs"
fi
if [ -f "_mtd.hills" ]; then
    mv "_mtd.hills" "$STAGE_STRING.mtdhills"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.mtdhills"
fi
if [ -f "_stm.out" ]; then
    mv "_stm.out" "$STAGE_STRING.stmout"
    FILES_TO_ARCHIVE="$FILES_TO_ARCHIVE $STAGE_STRING.stmout"
fi

if [ -n "$FILES_TO_ARCHIVE" ]; then
    parchive move $FILES_TO_ARCHIVE
    if [ $? -ne 0 ]; then exit 1; fi
fi

#---------------------------------------------------------------------------
# check for end

echo ""
echo " IL - 4. Testing if this is the last run ..."

if [ "$NEXT_STAGE" -gt "$PRECYCLE_STOP" ]; then
    echo "      YES, the last run was performed - precycle is terminated."
    echo ""
    echo "================================================================================"
    echo "|                                                                              |"
    echo "|                               END OF PRECYCLE                                |"
    echo "|                                                                              |"
    echo "================================================================================"
    echo ""
    exit 0
fi

if [ -f "EXIT" ] || [ -f "STOP" ]; then
    echo "      The EXIT/STOP file was found - precycle is softly interrupted."
    echo ""
    echo "================================================================================"
    echo "|                                                                              |"
    echo "|                               END OF PRECYCLE                                |"
    echo "|                                                                              |"
    echo "================================================================================"
    echo ""
    exit 0
fi

    echo "      NO, precycle will continue with the next run."
echo ""

echo "#-------------------------------------------------------------------------------"

# update for next internal loop
STAGE=$NEXT_STAGE
STAGE_STRING="`printf "$PRECYCLE_NAME_FORMAT" $STAGE`"

done     # end of PRECYCLE_ICYCLES cycle

# -----------------------------------------------------------------------------
# resubmit job to the queue

echo ""
echo " 6. Submiting the next run to the batch system via the Infinity system ..."

if [ "$INF_ARG_DESTINATION" == "" ] || [ "$INF_ARG_JOB" == "" ]; then
    echo ""
    echo " ERROR: INF_ARG_DESTINATION or INF_ARG_JOB variable is not set!"
    echo "        The job was not re-submited to the batch system!"
    echo ""
    exit 1
fi

# set next job parameters
export INF_EXTERNAL_NAME_AFIX=\"#`printf %03d $NEXT_STAGE`\"
export INF_EXTERNAL_START_AFTER=$PBS_JOBID

presubmit

if [ $? -ne 0 ]; then
    echo ""
    echo " ERROR: Unable to re-submit the job!"
    echo ""
    exit 1
fi

echo ""
echo "================================================================================"
echo "|                                                                              |"
echo "|                               END OF PRECYCLE                                |"
echo "|                                                                              |"
echo "================================================================================"
echo ""

